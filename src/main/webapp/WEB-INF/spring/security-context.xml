<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="customLoginSuccess" class="org.recruit.security.CustomLoginSuccessHandler"/>
	<!-- <bean id="CustomNoOpPasswordEncoder" class="org.zerock.security.CustomNoOpPasswordEncoder"/> -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	<bean id="customUserDetailService" class="org.recruit.security.CustomUserDetailsService"/>
	
	<security:http auto-config="true" use-expressions="true">
	
		<security:intercept-url pattern="/sample/all" access="permitAll"/>
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/> 
		<!-- <security:intercept-url pattern="/sample/annoMember" access="hasAnyRole('ROLE_ADMIN', 'ROLE_MEMBER')"/> -->
		
		<!-- 모든 http 요청에 따라 자체 form-login 설정 
		<security:form-login/>-->
	
		<security:form-login login-page="/customLogin"/>
	
		<security:access-denied-handler error-page="/accessError"/>
		
		<!-- Post 방식의 customLogout / 자신의 세션을 모두 만료시켜야 logout 완료 -->
		<security:logout logout-url="/customLogout" invalidate-session="true"/>
		
	</security:http>
	
	<security:authentication-manager>
	
		<security:authentication-provider user-service-ref="customUserDetailService">
		
			<!-- member/admin 계정 하나씩 직접 생성
			<security:user-service>
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>	
				<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/>
			</security:user-service> -->
			
			<!-- DB와 연결해서 jdbc형식으로 id/pw 인증/권한 등 모든 처리 / root-context.xml에 dataSouce 객체 전달 -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource"/> -->
			
			<!-- <security:jdbc-user-service 
			data-source-ref="dataSource" 
			users-by-username-query="select userid , userpw , enabled from tbl_member where userid = ? " 
			authorities-by-username-query="select userid, auth from tbl_member_auth where userid = ? " />  -->
			
			<!-- <security:password-encoder ref="CustomNoOpPasswordEncoder"/> -->
			
			<!-- PW 암호화 -->
			<security:password-encoder ref="bcryptPasswordEncoder"/>
			
		</security:authentication-provider>
	</security:authentication-manager>
	
</beans>
